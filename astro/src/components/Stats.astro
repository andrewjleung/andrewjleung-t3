---
---

<div id="stats" class="font-mono min-h-[3em]">

</div>

<script>
  import { z } from "astro:schema";

  const letters = "ABCDEFGHIJKLMNOPRSTUVWXYZ0123456789";
  let target: string | undefined
  let phase = "stopped"
  let statLength = 0
  let pointer = 0

  async function getWeatherStat() {
    const WEATHER_ENDPOINT =
      "https://api.open-meteo.com/v1/forecast?latitude=32.7378&longitude=-97.3631&current=temperature_2m,is_day,precipitation,rain,showers,snowfall,cloud_cover,wind_speed_10m&hourly=wind_speed_10m&temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch&forecast_days=1";

    const WeatherResponse = z.object({
      current: z.object({
        time: z.coerce.date(),
        temperature_2m: z.number(),
        is_day: z
          .number()
          .int()
          .gte(0)
          .lte(1)
          .transform((val) => val === 1),
        precipitation: z.number(),
        rain: z.number(),
        showers: z.number(),
        snowfall: z.number(),
        cloud_cover: z.number(),
        wind_speed_10m: z.number(),
      }),
    });

    type WeatherResponse = z.infer<typeof WeatherResponse>;

    return await fetch(WEATHER_ENDPOINT)
      .then((res) => res.json())
      .then((res) => WeatherResponse.parse(res).current)
      .then((currentWeather) => {
          const adjectivesAndConditions: [string, boolean][] = [
          ["snowy", currentWeather.snowfall > 0],
          ["rainy", currentWeather.rain >= 0.01],
          ["windy", currentWeather.wind_speed_10m > 20],
          ["cloudy", currentWeather.cloud_cover > 45],
          ["sunny", currentWeather.is_day],
          ["peaceful", !currentWeather.is_day],
        ];

        const result = adjectivesAndConditions.find(([_, condition]) => condition);

        if (result === undefined) {
          return "Based in Fort Worth, TX"
        } else {
          return `Based in ${result[0]} Fort Worth, TX`
        }
      })
  }

  function randomString(length: number) {
    let str = ""

    while (str.length < length) {
      str += letters[Math.floor(Math.random() * letters.length)];
    }

    return str;
  }

  function setStat(stat: string) {
    document.getElementById("stats").textContent = stat
  }

  function updateStats() {
    if (phase === "stopped")  {
      return
    } 

    if (phase === "random") {
      setStat(randomString(statLength))

      if (statLength < 44) {
        statLength += 1
      }
    } else if (phase === "go-to-target" && target !== undefined) {
      const stat = target.slice(0, pointer).concat(
        randomString(
          Math.max(
            0,
            (() => {
              if (statLength < target.length) {
                return statLength - pointer + 1;
              } else if (statLength > target.length) {
                return statLength - pointer - 1;
              } else {
                return statLength - pointer;
              }
            })(),
          )
        )
      )

      setStat(stat)

      if (stat === target) {
        phase = "stopped"
      }

      pointer += 1
    }
  }

  getWeatherStat().then(stat => {target = stat; phase = "go-to-target"})

  setTimeout(() => { if (target === undefined) phase = "random" }, 1750);
  setInterval(updateStats, 20);
</script>
